<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jonchan1013.github.io</id>
    <title>CY的学习博客</title>
    <updated>2020-06-10T02:16:18.549Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jonchan1013.github.io"/>
    <link rel="self" href="https://jonchan1013.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://jonchan1013.github.io/images/avatar.png</logo>
    <icon>https://jonchan1013.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, CY的学习博客</rights>
    <entry>
        <title type="html"><![CDATA[Java环境变量配置]]></title>
        <id>https://jonchan1013.github.io/post/java-ji-chu/</id>
        <link href="https://jonchan1013.github.io/post/java-ji-chu/">
        </link>
        <updated>2019-06-08T01:04:05.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>学习java的第一步就要搭建java的学习环境，首先是要安装JDK，JDK安装好之后，还需要在电脑上配置&quot;JAVA_HOME”、&quot;path”、&quot;classpath&quot;这三个环境变量才能够把java的开发环境搭建好。在没安装过jdk的环境下，path环境变量是系统变量，本来存在的，而JAVA_HOME和classpath是不存在的。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>学习java的第一步就要搭建java的学习环境，首先是要安装JDK，JDK安装好之后，还需要在电脑上配置&quot;JAVA_HOME”、&quot;path”、&quot;classpath&quot;这三个环境变量才能够把java的开发环境搭建好。在没安装过jdk的环境下，path环境变量是系统变量，本来存在的，而JAVA_HOME和classpath是不存在的。</p>
<!-- more -->
<ol>
<li>
<p>配置JAVA_HOME变量<br>
操作步骤：计算机→右键“属性”→高级系统设置→高级→环境变量，如下图所示：<br>
<img src="https://gitee.com/chenyong1013/picCloud/raw/master/20200610095005.png" alt="" loading="lazy"><br>
<img src="https://gitee.com/chenyong1013/picCloud/raw/master/20200610095133.png" alt="" loading="lazy"><br>
<img src="https://gitee.com/chenyong1013/picCloud/raw/master/20200610095235.png" alt="" loading="lazy"><br>
点击系统变量下面的“【新建】”，弹出一个新建系统变量对话框，首先在变量名写上JAVA_HOME，顾名思义，JAVA_HOME的含义就是JDK的安装路径，，然后在变量值写JDK的安装路径，如这里设置的变量值是&quot;C:\Program Files (x86)\Java\jdk1.8.0&quot;，设置好变量值之后，点击【确定】按钮，JAVA_HOME环境变量就设置完成，如下图所示：系统变量中多了一个&quot;JAVA_HOME&quot;变量</p>
</li>
<li>
<p>配置path环境变量<br>
操作步骤：计算机→右键“属性”→高级系统设置→高级→环境变量<br>
找到系统变量中的Path变量，点击【编辑】按钮，弹出编辑系统变量的对话框，可以看到，Path变量中设置有很多的目录，每个目录之间使用;(分号)隔开,将%JAVA_HOME%\bin;添加到Path变量的变量值中，点击【确定】按钮，Path环境变量的就设置完成了，如下图所示：<br>
<img src="https://gitee.com/chenyong1013/picCloud/raw/master/20200610095552.png" alt="" loading="lazy"></p>
</li>
<li>
<p>配置ClassPath变量<br>
设置Classpath的目的，在于告诉Java执行环境，在哪些目录下可以找到您所要执行的Java程序(.class文件)，关于这个ClassPath变量，其实可以不用配置了<br>
<img src="https://gitee.com/chenyong1013/picCloud/raw/master/20200610095445.png" alt="" loading="lazy"></p>
</li>
<li>
<p>JAVA_HOME变量、Path变量、ClassPath变量的说明</p>
<ol>
<li>设置JAVA_HOME变量的目的
<ol>
<li>为了方便引用，比如，JDK安装在C:\Program Files (x86)\Java\jdk1.8.0目录里，则设置JAVA_HOME为该目录路径, 那么以后要使用这个路径的时候, 只需输入%JAVA_HOME%即可, 避免每次引用都输入很长的路径串;</li>
<li>归一原则, 当JDK路径被迫改变的时候, 仅需更改JAVA_HOME的变量值即可。</li>
<li>第三方软件会引用约定好的JAVA_HOME变量, 典型的就是tomcat服务器，如果不配置JAVA_HOME变量，那么tomcat服务器根本运行不起来</li>
</ol>
</li>
<li>Path变量(重点说明)<br>
操作系统用path的路径来找可执行程序(.exe程序)，在windows下当我们敲任何一个命令时，实际上就是在执行一个可执行文件，如输入notepad命令就可以打开一个记事本<br>
<img src="https://gitee.com/chenyong1013/picCloud/raw/master/20200610100042.png" alt="" loading="lazy"><br>
实际上是执行了c:\Windows下的notepad.exe这个可执行文件，和用鼠标双击notepad.exe后能够打开一个记事本的效果是一样的<br>
<img src="https://gitee.com/chenyong1013/picCloud/raw/master/20200610100137.png" alt="" loading="lazy"><br>
当在命令窗口敲一个命令时，系统就会去自动寻找这个命令对应的可执行文件(.exe)，如果这个文件不存在，就当然无法执行这个命令了。这个可执行文件的根目录必须设置在path环境变量中。</li>
<li>在命令窗口显示path设置的环境变量<br>
直接输入“echo %path%”命令就可以显示设置的path环境变量的所有根目录了，只要是根目录里面存在相应的.exe文件，敲入命令时就能执行这个相应的.exe文件。因为notepad.exe所在的Windows目录已经添加到了Path环境变量中了，这就解释了为什么输入命令notepad就可以打开一个记事本，所以前面配置java开发环境时，将%JAVA_HOME%\bin添加到Path变量中的目的就是希望可以在命令行窗口下使用javac和java这两个命令来执行javac.exe和java.exe这两个可执行程序。</li>
<li>Classpath变量说明<br>
使用javac命令编译.java文件时，如果需要其他的类，也是通过classpath去找的，<br>
　　使用java命令执行.class文件时，执行的.class文件是通过classpath去找的。<br>
　　classpath表示的是要查找的类所在的路径。</li>
</ol>
</li>
<li>
<p>用户变量和系统变量的区别<br>
用户变量，顾名思义，是针对某一个特定的用户的，只对特定的用户有效，而系统变量，则对任何用户都有效。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Intellij IDEA常用快捷键]]></title>
        <id>https://jonchan1013.github.io/post/intellij-idea-chang-yong-kuai-jie-jian/</id>
        <link href="https://jonchan1013.github.io/post/intellij-idea-chang-yong-kuai-jie-jian/">
        </link>
        <updated>2019-06-03T07:17:39.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="️最常用快捷键">✍️最常用快捷键</h3>
<ol>
<li>Alt+回车 导入包,自动修正</li>
<li>Ctrl+N  查找类</li>
</ol>
]]></summary>
        <content type="html"><![CDATA[<h3 id="️最常用快捷键">✍️最常用快捷键</h3>
<ol>
<li>Alt+回车 导入包,自动修正</li>
<li>Ctrl+N  查找类<!-- more -->
</li>
<li>Ctrl+Shift+N 查找文件</li>
<li>Ctrl+Alt+L  格式化代码</li>
<li>Ctrl+Alt+O 优化导入的类和包</li>
<li>Alt+Insert 生成代码(如get,set方法,构造函数等)</li>
<li>Ctrl+E或者Alt+Shift+C  最近更改的代码</li>
<li>Ctrl+R 替换文本</li>
<li>Ctrl+F 查找文本</li>
<li>Ctrl+Shift+Space 自动补全代码</li>
<li>Ctrl+空格 代码提示</li>
<li>Ctrl+Alt+Space 类名或接口名提示</li>
<li>Ctrl+P 方法参数提示</li>
<li>Ctrl+Shift+Alt+N 查找类中的方法或变量</li>
<li>Alt+Shift+C 对比最近修改的代码</li>
<li>Shift+F6  重构-重命名</li>
<li>Ctrl+Shift+先上键</li>
<li>Ctrl+X 删除行</li>
<li>Ctrl+D 复制行</li>
<li>Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者/<em>...</em>/ ）</li>
<li>Ctrl+J  自动代码</li>
<li>Ctrl+E 最近打开的文件</li>
<li>Ctrl+H 显示类结构图</li>
<li>Ctrl+Q 显示注释文档</li>
<li>Alt+F1 查找代码所在位置</li>
<li>Alt+1 快速打开或隐藏工程面板</li>
<li>Ctrl+Alt+ left/right 返回至上次浏览的位置</li>
<li>Alt+ left/right 切换代码视图</li>
<li>Alt+ Up/Down 在方法间快速移动定位</li>
<li>Ctrl+Shift+Up/Down 代码向上/下移动。</li>
<li>F2 或Shift+F2 高亮错误或警告快速定位</li>
<li>代码标签输入完成后，按Tab，生成代码。</li>
<li>选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。</li>
<li>Ctrl+W 选中代码，连续按会有其他效果</li>
<li>选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。</li>
<li>Ctrl+Up/Down 光标跳转到第一行或最后一行下</li>
<li>Ctrl+B 快速打开光标处的类或方法</li>
<li>Ctrl＋E，可以显示最近编辑的文件列表</li>
<li>Shift＋Click可以关闭文件</li>
<li>Ctrl＋[或]可以跳到大括号的开头结尾</li>
<li>Ctrl＋Shift＋Backspace可以跳转到上次编辑的地方</li>
<li>Ctrl＋F12，可以显示当前文件的结构</li>
<li>Ctrl＋F7可以查询当前元素在当前文件中的引用，然后按F3可以选择</li>
<li>Ctrl＋Shift＋N，可以快速打开文件</li>
<li>Alt＋Q可以看到当前方法的声明</li>
<li>Ctrl＋W可以选择单词继而语句继而行继而函数</li>
<li>Alt＋F1可以将正在编辑的元素在各个面板中定位</li>
<li>Ctrl＋Shift＋Insert可以选择剪贴板内容并插入</li>
<li>Alt＋Insert可以生成构造器/Getter/Setter等</li>
<li>Ctrl＋Alt＋V 可以引入变量。例如把括号内的SQL赋成一个变量</li>
<li>Ctrl＋Alt＋T可以把代码包在一块内，例如try/catch</li>
<li>Alt＋Up and Alt＋Down可在方法间快速移动</li>
</ol>
<p>👨‍💻👨‍💻👨‍💻👨‍💻👨‍💻</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://jonchan1013.github.io/post/hello-gridea/</id>
        <link href="https://jonchan1013.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>